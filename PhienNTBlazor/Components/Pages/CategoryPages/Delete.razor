@page "/categories/delete"
@using Models
@using Repository
@inject ICategoryRepo CategoryRepo
@inject NavigationManager NavigationManager

<PageTitle>Delete Category</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Category</h2>
    <hr />
    @if (category is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">CategoryName</dt>
            <dd class="col-sm-10">@category.CategoryName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CategoryDesciption</dt>
            <dd class="col-sm-10">@category.CategoryDesciption</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ParentCategoryId</dt>
            <dd class="col-sm-10">@category.ParentCategoryId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsActive</dt>
            <dd class="col-sm-10">@category.IsActive</dd>
        </dl>

        @if (isUsedInArticles)
        {
            <div class="alert alert-danger">
                <p>This category cannot be deleted because it is used by one or more news articles.</p>
            </div>
            <a href="/categories">Back to List</a>
        }
        else
        {
            <EditForm method="post" Model="category" OnValidSubmit="DeleteCategory" FormName="delete" Enhance>
                <button type="submit" class="btn btn-danger" disabled="@(category is null)">Delete</button> |
                <a href="/categories">Back to List</a>
            </EditForm>
        }
    }
</div>

@code {
    private Category? category;
    private bool isUsedInArticles = false;

    [SupplyParameterFromQuery]
    private int CategoryId { get; set; }

    protected override void OnInitialized()
    {
        category = CategoryRepo.GetCategoryById(CategoryId);

        if (category is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            isUsedInArticles = CategoryRepo.IsCategoryUsedInArticles(CategoryId);
        }
    }

    private async Task DeleteCategory()
    {
        if (!isUsedInArticles)
        {
            CategoryRepo.DeleteCategory(CategoryId);
            NavigationManager.NavigateTo("/categories");
        }
    }
}