@page "/systemaccounts/delete"
@using Models
@using Repository
@inject IAccountRepo AccountRepo
@inject NavigationManager NavigationManager

<PageTitle>Delete Account</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this account?</p>
<div>
    <h2>System Account</h2>
    <hr />
    @if (account is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (hasCreatedArticles || hasUpdatedArticles)
        {
            <div class="alert alert-danger">
                This account cannot be deleted because it is associated with news articles.
                @if (hasCreatedArticles)
                {
                    <div>This account has created articles.</div>
                }
                @if (hasUpdatedArticles)
                {
                    <div>This account has updated articles.</div>
                }
            </div>
        }

        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@account.AccountName</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@account.AccountEmail</dd>
            <dt class="col-sm-2">Role</dt>
            <dd class="col-sm-10">@account.AccountRole</dd>
        </dl>
        <EditForm method="post" Model="account" OnValidSubmit="DeleteAccount" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(account is null || hasCreatedArticles || hasUpdatedArticles)">Delete</button> |
            <a href="/systemaccounts">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private SystemAccount? account;
    private bool hasCreatedArticles = false;
    private bool hasUpdatedArticles = false;

    [SupplyParameterFromQuery]
    private int AccountId { get; set; }

    protected override void OnInitialized()
    {
        account = AccountRepo.GetAccountById(AccountId);

        if (account is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        hasCreatedArticles = AccountRepo.HasCreatedArticles(AccountId);
        hasUpdatedArticles = AccountRepo.HasUpdatedArticles(AccountId);
    }

    private void DeleteAccount()
    {
        if (account != null && !hasCreatedArticles && !hasUpdatedArticles)
        {
            AccountRepo.DeleteAccount(account.AccountId);
            NavigationManager.NavigateTo("/systemaccounts");
        }
    }
}