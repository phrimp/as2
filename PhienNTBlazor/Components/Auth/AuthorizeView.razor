@using PhienNTBlazor.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager

@if (initialized)
{
    @if (AuthService.IsAuthenticated && (Roles == null || Roles.Contains(AuthService.CurrentUser?.AccountRole)))
    {
        @ChildContent
    }
    else
    {
        @if (RedirectToLogin)
        {
            <div class="alert alert-warning">
                You must be logged in to access this page.
                <button class="btn btn-sm btn-primary ms-2" @onclick="NavigateToLogin">Login</button>
            </div>
        }
    }
}
else
{
    <div>Loading...</div>
}

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string[]? Roles { get; set; }

    [Parameter]
    public bool RedirectToLogin { get; set; } = true;

    private bool initialized = false;

    protected override async Task OnInitializedAsync()
    {
        initialized = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Initialize authentication state after rendering
                initialized = true;

                if (!AuthService.IsAuthenticated && RedirectToLogin)
                {
                    NavigateToLogin();
                }
                else
                {
                    // Force rerender to reflect authenticated state
                    StateHasChanged();
                }
            }
            catch
            {
                // Handle any exceptions during initialization
                initialized = true;
                StateHasChanged();
            }
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
    }
}