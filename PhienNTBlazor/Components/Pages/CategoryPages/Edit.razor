@page "/categories/edit"
@using Microsoft.EntityFrameworkCore
@using Models
@inject IDbContextFactory<Models.NewsSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Category</h2>
<hr />
@if (Category is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Category" OnValidSubmit="UpdateCategory" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Category.CategoryId" value="@Category.CategoryId" />
                <div class="mb-3">
                    <label for="categoryname" class="form-label">CategoryName:</label>
                    <InputText id="categoryname" @bind-Value="Category.CategoryName" class="form-control" />
                    <ValidationMessage For="() => Category.CategoryName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="categorydesciption" class="form-label">CategoryDesciption:</label>
                    <InputText id="categorydesciption" @bind-Value="Category.CategoryDesciption" class="form-control" />
                    <ValidationMessage For="() => Category.CategoryDesciption" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="parentcategoryid" class="form-label">ParentCategoryId:</label>
                    <InputNumber id="parentcategoryid" @bind-Value="Category.ParentCategoryId" class="form-control" />
                    <ValidationMessage For="() => Category.ParentCategoryId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isactive" class="form-label">IsActive:</label>
                    <InputCheckbox id="isactive" @bind-Value="Category.IsActive" class="form-check-input" />
                    <ValidationMessage For="() => Category.IsActive" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/categories">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int CategoryId { get; set; }

    [SupplyParameterFromForm]
    private Category? Category { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Category ??= await context.Categories.FirstOrDefaultAsync(m => m.CategoryId == CategoryId);

        if (Category is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateCategory()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Category!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CategoryExists(Category!.CategoryId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/categories");
    }

    private bool CategoryExists(int categoryid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Categories.Any(e => e.CategoryId == categoryid);
    }
}
