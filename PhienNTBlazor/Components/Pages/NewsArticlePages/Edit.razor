@page "/newsarticles/edit"
@using Models
@using Repository
@inject INewsArticleRepo NewsArticleRepo
@inject ICategoryRepo CategoryRepo
@inject IAccountRepo AccountRepo
@inject NavigationManager NavigationManager

<PageTitle>Edit News Article</PageTitle>

<h1>Edit News Article</h1>

<hr />
@if (NewsArticle is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-6">
            <EditForm method="post" Model="NewsArticle" OnValidSubmit="UpdateNewsArticle" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />

                <input type="hidden" name="NewsArticle.NewsArticleId" value="@NewsArticle.NewsArticleId" />
                <input type="hidden" name="NewsArticle.CreatedById" value="@NewsArticle.CreatedById" />
                <input type="hidden" name="NewsArticle.CreatedDate" value="@NewsArticle.CreatedDate" />

                <div class="mb-3">
                    <label for="newstitle" class="form-label">Title:</label>
                    <InputText id="newstitle" @bind-Value="NewsArticle.NewsTitle" class="form-control" />
                    <ValidationMessage For="() => NewsArticle.NewsTitle" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="headline" class="form-label">Headline:</label>
                    <InputText id="headline" @bind-Value="NewsArticle.Headline" class="form-control" />
                    <ValidationMessage For="() => NewsArticle.Headline" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="newscontent" class="form-label">Content:</label>
                    <InputTextArea id="newscontent" @bind-Value="NewsArticle.NewsContent" class="form-control" rows="5" />
                    <ValidationMessage For="() => NewsArticle.NewsContent" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="newssource" class="form-label">Source:</label>
                    <InputText id="newssource" @bind-Value="NewsArticle.NewsSource" class="form-control" />
                    <ValidationMessage For="() => NewsArticle.NewsSource" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="categoryid" class="form-label">Category:</label>
                    <InputSelect id="categoryid" @bind-Value="NewsArticle.CategoryId" class="form-select">
                        @foreach (var category in categories)
                        {
                            <option value="@category.CategoryId">@category.CategoryName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => NewsArticle.CategoryId" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="newsstatus" class="form-label">Status:</label>
                    <InputSelect id="newsstatus" @bind-Value="NewsArticle.NewsStatus" class="form-select">
                        <option value="Draft">Draft</option>
                        <option value="Published">Published</option>
                        <option value="Archived">Archived</option>
                    </InputSelect>
                    <ValidationMessage For="() => NewsArticle.NewsStatus" class="text-danger" />
                </div>

                <!-- Read-only information -->
                <div class="mb-3">
                    <label class="form-label">Created By:</label>
                    <input type="text" class="form-control" value="@createdByName" readonly />
                </div>

                <div class="mb-3">
                    <label class="form-label">Created Date:</label>
                    <input type="text" class="form-control" value="@NewsArticle.CreatedDate.ToString("g")" readonly />
                </div>

                <!-- Hidden fields -->
                <InputNumber id="updatedbyid" @bind-Value="NewsArticle.UpdatedById" class="d-none" />

                <button type="submit" class="btn btn-primary">Save</button>
                <a href="/newsarticles" class="btn btn-secondary ms-2">Cancel</a>
            </EditForm>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    private int NewsArticleId { get; set; }

    [SupplyParameterFromForm]
    private NewsArticle? NewsArticle { get; set; }

    private IEnumerable<Category> categories = new List<Category>();
    private string createdByName = "";

    protected override void OnInitialized()
    {
        categories = CategoryRepo.GetActiveCategories();

        NewsArticle ??= NewsArticleRepo.GetNewsArticleById(NewsArticleId);

        if (NewsArticle is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        var creator = AccountRepo.GetAccountById(NewsArticle.CreatedById);
        createdByName = creator?.AccountName ?? "Unknown";

        NewsArticle.UpdatedById = 1; // Default to first user (in a real app, would be current user)
    }

    private void UpdateNewsArticle()
    {
        if (NewsArticle != null)
        {
            NewsArticle.ModifiedDate = DateTime.Now;

            NewsArticleRepo.UpdateNewsArticle(NewsArticle);
            NavigationManager.NavigateTo("/newsarticles");
        }
    }
}