@page "/systemaccounts/edit"
@using Models
@using Repository
@inject IAccountRepo AccountRepo
@inject NavigationManager NavigationManager

<PageTitle>Edit Account</PageTitle>

<h1>Edit</h1>

<h2>System Account</h2>
<hr />
@if (Account is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Account" OnValidSubmit="UpdateAccount" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">
                        @errorMessage
                    </div>
                }

                <input type="hidden" name="Account.AccountId" value="@Account.AccountId" />

                <div class="mb-3">
                    <label for="accountname" class="form-label">Name:</label>
                    <InputText id="accountname" @bind-Value="Account.AccountName" class="form-control" />
                    <ValidationMessage For="() => Account.AccountName" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="accountemail" class="form-label">Email:</label>
                    <InputText id="accountemail" @bind-Value="Account.AccountEmail" class="form-control" />
                    <ValidationMessage For="() => Account.AccountEmail" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="accountrole" class="form-label">Role:</label>
                    <InputSelect id="accountrole" @bind-Value="Account.AccountRole" class="form-select">
                        <option value="Admin">Admin</option>
                        <option value="Staff">Staff</option>
                        <option value="Lecturer">Lecturer</option>
                    </InputSelect>
                    <ValidationMessage For="() => Account.AccountRole" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="accountpassword" class="form-label">Password:</label>
                    <InputText id="accountpassword" @bind-Value="Account.AccountPassword" class="form-control" />
                    <ValidationMessage For="() => Account.AccountPassword" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
                <a href="/systemaccounts" class="btn btn-secondary ms-2">Back to List</a>
            </EditForm>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    private int AccountId { get; set; }

    [SupplyParameterFromForm]
    private SystemAccount? Account { get; set; }

    private string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        Account ??= AccountRepo.GetAccountById(AccountId);

        if (Account is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private void UpdateAccount()
    {
        if (AccountRepo.IsEmailExists(Account.AccountEmail, Account.AccountId))
        {
            errorMessage = "Email already exists";
            return;
        }

        AccountRepo.UpdateAccount(Account);
        NavigationManager.NavigateTo("/systemaccounts");
    }
}