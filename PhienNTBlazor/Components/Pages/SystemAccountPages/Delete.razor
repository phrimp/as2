@page "/systemaccounts/delete"
@using Models
@using Repository
@inject IAccountRepo AccountRepo
@inject NavigationManager NavigationManager

<PageTitle>Delete Account</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>System Account</h2>
    <hr />
    @if (account is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Account Name</dt>
            <dd class="col-sm-10">@account.AccountName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@account.AccountEmail</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Role</dt>
            <dd class="col-sm-10">@account.AccountRole</dd>
        </dl>

        @if (hasCreatedArticles || hasUpdatedArticles)
        {
            <div class="alert alert-warning">
                <p>This account is associated with one or more articles:</p>
                <ul>
                    @if (hasCreatedArticles)
                    {
                        <li>Created @createdArticlesCount article(s)</li>
                    }
                    @if (hasUpdatedArticles)
                    {
                        <li>Updated @updatedArticlesCount article(s)</li>
                    }
                </ul>
                <p>Consider reassigning these articles before deleting this account.</p>
            </div>
        }

        <EditForm method="post" Model="account" OnValidSubmit="DeleteSystemAccount" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(account is null)">Delete</button> |
            <a href="/systemaccounts">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private SystemAccount? account;
    private bool hasCreatedArticles = false;
    private bool hasUpdatedArticles = false;
    private int createdArticlesCount = 0;
    private int updatedArticlesCount = 0;

    [SupplyParameterFromQuery]
    private int AccountId { get; set; }

    protected override void OnInitialized()
    {
        account = AccountRepo.GetAccountById(AccountId);

        if (account is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Check if account has created or updated articles
        hasCreatedArticles = AccountRepo.HasCreatedArticles(AccountId);
        hasUpdatedArticles = AccountRepo.HasUpdatedArticles(AccountId);

        if (hasCreatedArticles)
        {
            var articles = AccountRepo.GetArticlesCreatedByAccount(AccountId);
            createdArticlesCount = articles.Count();
        }

        if (hasUpdatedArticles)
        {
            var articles = AccountRepo.GetArticlesUpdatedByAccount(AccountId);
            updatedArticlesCount = articles.Count();
        }
    }

    private async Task DeleteSystemAccount()
    {
        // Delete the account using repository
        AccountRepo.DeleteAccount(AccountId);
        NavigationManager.NavigateTo("/systemaccounts");
    }
}