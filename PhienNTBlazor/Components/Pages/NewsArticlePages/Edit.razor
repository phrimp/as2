@page "/newsarticles/edit"
@using Microsoft.EntityFrameworkCore
@using Models
@inject IDbContextFactory<Models.NewsSystemContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>NewsArticle</h2>
<hr />
@if (NewsArticle is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="NewsArticle" OnValidSubmit="UpdateNewsArticle" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="NewsArticle.NewsArticleId" value="@NewsArticle.NewsArticleId" />
                <div class="mb-3">
                    <label for="newstitle" class="form-label">NewsTitle:</label>
                    <InputText id="newstitle" @bind-Value="NewsArticle.NewsTitle" class="form-control" />
                    <ValidationMessage For="() => NewsArticle.NewsTitle" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="headline" class="form-label">Headline:</label>
                    <InputText id="headline" @bind-Value="NewsArticle.Headline" class="form-control" />
                    <ValidationMessage For="() => NewsArticle.Headline" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createddate" class="form-label">CreatedDate:</label>
                    <InputDate id="createddate" @bind-Value="NewsArticle.CreatedDate" class="form-control" />
                    <ValidationMessage For="() => NewsArticle.CreatedDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="newscontent" class="form-label">NewsContent:</label>
                    <InputText id="newscontent" @bind-Value="NewsArticle.NewsContent" class="form-control" />
                    <ValidationMessage For="() => NewsArticle.NewsContent" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="newssource" class="form-label">NewsSource:</label>
                    <InputText id="newssource" @bind-Value="NewsArticle.NewsSource" class="form-control" />
                    <ValidationMessage For="() => NewsArticle.NewsSource" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="categoryid" class="form-label">CategoryId:</label>
                    <InputNumber id="categoryid" @bind-Value="NewsArticle.CategoryId" class="form-control" />
                    <ValidationMessage For="() => NewsArticle.CategoryId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="newsstatus" class="form-label">NewsStatus:</label>
                    <InputText id="newsstatus" @bind-Value="NewsArticle.NewsStatus" class="form-control" />
                    <ValidationMessage For="() => NewsArticle.NewsStatus" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdbyid" class="form-label">CreatedById:</label>
                    <InputNumber id="createdbyid" @bind-Value="NewsArticle.CreatedById" class="form-control" />
                    <ValidationMessage For="() => NewsArticle.CreatedById" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedbyid" class="form-label">UpdatedById:</label>
                    <InputNumber id="updatedbyid" @bind-Value="NewsArticle.UpdatedById" class="form-control" />
                    <ValidationMessage For="() => NewsArticle.UpdatedById" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="modifieddate" class="form-label">ModifiedDate:</label>
                    <InputDate id="modifieddate" @bind-Value="NewsArticle.ModifiedDate" class="form-control" />
                    <ValidationMessage For="() => NewsArticle.ModifiedDate" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/newsarticles">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int NewsArticleId { get; set; }

    [SupplyParameterFromForm]
    private NewsArticle? NewsArticle { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        NewsArticle ??= await context.NewsArticles.FirstOrDefaultAsync(m => m.NewsArticleId == NewsArticleId);

        if (NewsArticle is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateNewsArticle()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(NewsArticle!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!NewsArticleExists(NewsArticle!.NewsArticleId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/newsarticles");
    }

    private bool NewsArticleExists(int newsarticleid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.NewsArticles.Any(e => e.NewsArticleId == newsarticleid);
    }
}
