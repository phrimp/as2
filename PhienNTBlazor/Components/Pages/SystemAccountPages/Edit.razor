@page "/systemaccounts/edit"
@using Models
@using Repository
@inject IAccountRepo AccountRepo
@inject NavigationManager NavigationManager

<PageTitle>Edit Account</PageTitle>

<h1>Edit</h1>

<h2>System Account</h2>
<hr />
@if (SystemAccount is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="SystemAccount" OnValidSubmit="UpdateSystemAccount" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="SystemAccount.AccountId" value="@SystemAccount.AccountId" />

                @if (emailExists)
                {
                    <div class="alert alert-danger">
                        An account with this email already exists!
                    </div>
                }

                <div class="mb-3">
                    <label for="accountname" class="form-label">Account Name:</label>
                    <InputText id="accountname" @bind-Value="SystemAccount.AccountName" class="form-control" />
                    <ValidationMessage For="() => SystemAccount.AccountName" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="accountemail" class="form-label">Email:</label>
                    <InputText id="accountemail" @bind-Value="SystemAccount.AccountEmail" class="form-control" @onchange="CheckEmailExists" />
                    <ValidationMessage For="() => SystemAccount.AccountEmail" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="accountrole" class="form-label">Role:</label>
                    <InputSelect id="accountrole" @bind-Value="SystemAccount.AccountRole" class="form-control">
                        <option value="Admin">Admin</option>
                        <option value="Staff">Staff</option>
                        <option value="Lecturer">Lecturer</option>
                    </InputSelect>
                    <ValidationMessage For="() => SystemAccount.AccountRole" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="accountpassword" class="form-label">Password:</label>
                    <InputText id="accountpassword" @bind-Value="SystemAccount.AccountPassword" class="form-control" />
                    <ValidationMessage For="() => SystemAccount.AccountPassword" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary" disabled="@emailExists">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/systemaccounts">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int AccountId { get; set; }

    [SupplyParameterFromForm]
    private SystemAccount? SystemAccount { get; set; }

    private bool emailExists = false;
    private string originalEmail = string.Empty;

    protected override void OnInitialized()
    {
        if (SystemAccount == null)
        {
            SystemAccount = AccountRepo.GetAccountById(AccountId);

            if (SystemAccount is null)
            {
                NavigationManager.NavigateTo("notfound");
                return;
            }

            // Store the original email for comparison
            originalEmail = SystemAccount.AccountEmail;
        }
    }

    private void CheckEmailExists()
    {
        if (!string.IsNullOrEmpty(SystemAccount?.AccountEmail) && SystemAccount.AccountEmail != originalEmail)
        {
            emailExists = AccountRepo.IsEmailExists(SystemAccount.AccountEmail, SystemAccount.AccountId);
        }
        else
        {
            emailExists = false;
        }
    }

    private async Task UpdateSystemAccount()
    {
        // Check one more time if the email exists for different account
        if (SystemAccount!.AccountEmail != originalEmail &&
            AccountRepo.IsEmailExists(SystemAccount.AccountEmail, SystemAccount.AccountId))
        {
            emailExists = true;
            return;
        }

        // Update the account using repository
        AccountRepo.UpdateAccount(SystemAccount);
        NavigationManager.NavigateTo("/systemaccounts");
    }
}