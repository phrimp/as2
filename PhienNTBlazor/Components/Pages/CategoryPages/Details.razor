@page "/categories/details"
@using Models
@using Repository
@inject ICategoryRepo CategoryRepo
@inject NavigationManager NavigationManager

<PageTitle>Category Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Category</h2>
    <hr />
    @if (category is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Category Name</dt>
            <dd class="col-sm-10">@category.CategoryName</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@category.CategoryDesciption</dd>
            <dt class="col-sm-2">Parent Category</dt>
            <dd class="col-sm-10">@category.ParentCategoryId</dd>
            <dt class="col-sm-2">Is Active</dt>
            <dd class="col-sm-10">@(category.IsActive ? "Yes" : "No")</dd>
        </dl>
        <div>
            <a href="@($"/categories/edit?categoryid={category.CategoryId}")">Edit</a> |
            <a href="/categories">Back to List</a>
        </div>
    }
</div>

@code {
    private Category? category;

    [SupplyParameterFromQuery]
    private int CategoryId { get; set; }

    protected override void OnInitialized()
    {
        category = CategoryRepo.GetCategoryById(CategoryId);

        if (category is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}